(()=>{"use strict";class e{constructor(e){this.container=e}static get markup(){return'\n    <div class="chat-container">\n      <section class="users-box">\n        <ul class="users-list"></ul>\n        <button class="exit__btn">Exit</button>\n      </section>\n      <section class="messages-box">\n        <ul class="messages-list"></ul>\n        <div class="new-message__box">\n          <div class="input__wrapper">\n            <input class="input__message" type="text" placeholder="Введите текст...">\n            <span class="tooltip-active hidden"></span>\n          </div>\n          <button class="add__message"></button>\n        </div>\n      </section>\n    </div>\n'}bindToDOM(){this.container.insertAdjacentHTML("afterbegin",this.constructor.markup)}}class t{constructor(e){this.name=e}init(){const t=new e(document.getElementById("container"));this.ctrl=new r(t),this.url="wss://serg-heroku.herokuapp.com//",this.ws=new WebSocket(this.url),this.ws.addEventListener("open",(e=>{console.log("connected")})),this.ws.addEventListener("message",(e=>{console.log("message"),this.packingData(e.data,this.name)})),this.ws.addEventListener("close",(e=>{console.log("connection closed",e)})),this.ws.addEventListener("error",(()=>{console.log("error")}))}sendMessage(e,t){if(console.log(this.ws.readyState,"readyState"),this.ws.readyState===WebSocket.OPEN)try{const s=JSON.stringify(e);this.ws.send(s),this.name=t}catch(e){console.log(e)}else console.log("Соединение разорвано, переподключаю..."),this.ws=new WebSocket(this.url)}packingData(e,t){const s=JSON.parse(e);if(console.log(s,"msg"),"message"===s.type)this.ctrl.renderingPost(s,t);else if("connect"===s.type)this.ctrl.addUser(s);else if("add"===s.type)this.ctrl.addUser(s);else if("exit"===s.type){const e=s.id;this.ctrl.removeUser(e)}}}const s=async e=>{const t=`https://serg-heroku.herokuapp.com/?${e.query}`;console.log(t,"url");const s=await fetch(t,{method:e.method,body:e.data?JSON.stringify(e.data):null});console.log(s,"request");const n=await s.json();return e.callback&&e.callback(n),console.log(n,""),n};class n{getStartedList(e){return s({method:"GET",query:"method=getStartedList",callback:e})}allTickets(e){return s({method:"GET",query:"method=allTickets",callback:e})}createNewUser(e,t){return s({method:"POST",query:"method=createNewUser",data:e,callback:t})}getUserName(e,t){return s({method:"GET",query:`method=getUserByName&name=${e}`,callback:t})}clearArrUsers(e){return s({method:"GET",query:"method=deleteAll",callback:e})}}class a{constructor(e,t,s=""){this.data=e,this.name=t,this.write=s}init(){this.bindToDOM()}static template(e,t,s){return`\n      <li class="posts__card" data-id="${e.id}" data-time="${e.created}" data-author="${e.author}">\n        <div class="post__wrapper  ${s}">\n          <div class="post__header">\n            <span class="posts__author">${t}, </span>\n            <span class="posts__datetime">${e.created}</span>\n          </div>\n          <div class="post__content">${e.message}</div>\n        </div>\n      </li>\n      `}bindToDOM(){const e=document.querySelector(".messages-list"),t=this.addPost(this.data,this.name,this.write);e.insertAdjacentHTML("beforeend",t)}addPost(){if(this.data){return this.constructor.template(this.data,this.name,this.write)}return!1}}class i{constructor(e){this.parentEl=e}static get markup(){return'\n        <div class="modal modal-active">\n            <form class="modal-form-box">\n\t\t        \t<div class="modal-content">\n\t\t\t          <h3 class="description__title"></h3>\n                <div class="input-wrapper">\n                  <label for="lfname">Выберите псевдоним</label> \n                  <input class="input-tooltip input__username" type="text" placeholder="Меня зовут..."/>\n                  <span class="tooltip-active hidden"></span>\n                </div>\n                <div class="button__block form__button">\n                \t<button class="modal-send__btn">Ok!</button>\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t      </div>\n            </form>\n        </div>\n'}redrawModalForm(){this.parentEl.insertAdjacentHTML("afterbegin",this.constructor.markup),this.modalWrapperEl.classList.add("modal-active")}get modalWrapperEl(){return this.parentEl.querySelector(".modal")}get modalButtonEl(){return this.parentEl.querySelector(".modal-send__btn")}validityFields(e){const t=document.createElement("span");if(t.classList.add("tooltip-active"),!e.parentElement.nextElementSibling.classList.contains("tooltip-active"))return""!==e.value||(e.parentElement.insertAdjacentElement("afterend",t),t.textContent="*Заполните поле",!1)}closeModalForm(){this.modalWrapperEl.classList.remove("modal-active"),this.parentEl.querySelector(".modal").remove()}}class r{constructor(e){this.board=e,this.api=new n}init(){this.board.bindToDOM(),this.container=document.querySelector("#container"),this.modal=new i(this.container),this.modal.redrawModalForm(),this.addSubscribe(this.container)}addSubscribe(e){e.addEventListener("click",this.onClickRegister.bind(this)),e.addEventListener("click",this.completionField.bind(this)),e.addEventListener("input",this.completionField.bind(this)),e.addEventListener("click",this.onClickAddMessage.bind(this)),e.addEventListener("keyup",this.keyUp.bind(this)),e.addEventListener("click",this.onClickExitBtn.bind(this))}onClickRegister(e){if(!e.target.classList.contains("modal-send__btn"))return;e.preventDefault();const t=document.querySelector(".input__username").value.trim();""!==t?this.api.getStartedList((e=>{-1!==this.getUserNameIdx(e,t)?this.showTooltip("*Этот никнейм уже занят"):(document.querySelector(".tooltip-active").classList.add("hidden"),this.modal.closeModalForm(),e.forEach((e=>{this.renderingAcc(e,e.name)})),this.createUser(t))})):this.showTooltip("*Заполните поле")}getUserNameIdx(e,t){return e.findIndex((e=>e.name===t))}createUser(e){this.api.createNewUser(e,(e=>{this.renderingAcc(e,`${e.name}(You)`),this.currentUser=e,this.sendData={type:"add",user:this.currentUser}})),this.socket=new t(this.currentUser),this.socket.init()}renderingAcc(e,t){document.querySelector(".users-list").insertAdjacentHTML("beforeend",this.constructor.getUserAccMarkup(e,t))}static getUserAccMarkup(e,t){return`\n  <li class="user__card" data-id="${e.id}" data-status="${e.status}" data-username="${e.name}">\n    <div class="card__content">\n      <div class="avatar-wrapper"></div>\n      <span class="username">${t}</span>\n    </div>\n\n  </li>\n  `}getMessage(){this.newMessage=document.querySelector(".input__message").value.trim();return{type:"message",author:this.currentUser.name,created:(new Date).toLocaleString(),message:this.newMessage}}renderingPost(e,t){e.author===t?this.post=new a(e,"You","my__notes"):this.post=new a(e,e.author,""),this.post.init(),document.querySelector(".input__message").value=""}showTooltip(e){const t=document.querySelector(".tooltip-active");t.classList.remove("hidden"),t.textContent=e}completionField(e){e.target.classList.contains("input__message")&&(e.preventDefault(),e.target.classList.contains("input__message")&&(this.newMessage=document.querySelector(".input__message").value.trim()),(""!==this.newMessage||e.target.parentElement.querySelector(".tooltip-active"))&&e.target.nextElementSibling.classList.add("hidden"))}onClickAddMessage(e){if(!e.target.classList.contains("add__message"))return;e.preventDefault();const t=this.getMessage();""!==this.newMessage?this.socket.sendMessage(t,this.currentUser.name):this.showTooltip("*Заполните поле")}keyUp(e){if(e.target.classList.contains("input__message")&&"Enter"===e.key){const e=this.getMessage();""!==this.newMessage?this.socket.sendMessage(e,this.currentUser.name,"message"):this.showTooltip("*Заполните поле")}}onClickExitBtn(e){if(!e.target.classList.contains("exit__btn"))return;const t={type:"exit",id:this.currentUser.id};this.socket.sendMessage(t,this.currentUser.name),document.querySelectorAll(".user__card").forEach((e=>e.remove())),document.querySelectorAll(".posts__card").forEach((e=>e.remove())),this.modal.redrawModalForm(),window.location.reload()}removeUser(e){this.users=document.querySelectorAll(".user__card");const t=[...this.users].find((t=>t.dataset.id===e));t&&t.remove()}addUser(e){console.log(e,"addDAta");try{this.users=document.querySelectorAll(".user__card");-1===[...this.users].findIndex((t=>t.dataset.username===e.user.name))&&this.renderingAcc(e.user,e.user.name)}catch(e){console.log(e)}}}const o=document.getElementById("container"),c=new e(o);new r(c).init()})();